name: 'Update'

on:
  push:
    branches:
      - 'dev'

jobs:
  compare-versions:
    runs-on: 'ubuntu-latest'

    outputs:
      latestVersion: ${{ steps.compare-versions.outputs.result }}

    steps:
      - name: 'Git Checkout'
        uses: 'actions/checkout@v3'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v3'
        with:
          node-version: 18

      - name: 'Install node-fetch'
        run: 'npm install node-fetch@2'

      - name: 'Compare Versions'
        id: 'compare-versions'
        uses: 'actions/github-script@v6'
        with:
          script: |
            const fetch = require('node-fetch')
            const { readFile } = require('fs/promises')

            , lastVersion = (await readFile('./version.txt', { encoding: 'utf-8' })).replace(/\s+/g, '')
            , latestVersion = (await (await fetch('https://api.github.com/repos/twitter/twemoji/releases/latest')).json()).tag_name.replace(/\s+/g, '')

            const res = lastVersion == latestVersion ? true : latestVersion

            return res

      - name: Get result
        run: echo "${{ steps.compare-versions.outputs.result }}"

  update:
    if: needs.compare-versions.outputs.latestVersion != true
    needs: 'compare-versions'
    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'actions/setup-node@v3'
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'

      - name: 'Install Dependencies'
        run: 'npm ci'

      - name: 'Create Update and Publish Packages'
        env:
          latestVersion: ${{ needs.compare-versions.outputs.latestVersion }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config --global user.name "unvented"
          git config --global user.email "unvented@users.noreply.github.com"
          npm version patch
          echo "packageVersion=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          npm run update
          npm run publish:all
          git commit -am "ci: bump twemazing to latest twemoji version"
          git push

      - name: 'Create and Publish Release'
        uses: 'actions/github-script@v6'
        env:
          latestVersion: ${{ needs.compare-versions.outputs.latestVersion }}
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.packageVersion}`,
              name: `v${process.env.packageVersion}`,
              body: '> **Note**: This is an automated update.',
              draft: false,
              prerelease: false
            })
            


