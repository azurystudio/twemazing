name: 'Update (hourly)'

on:
  push:
    branches:
      - 'dev'

jobs:
  check-version:
    runs-on: 'ubuntu-latest'

    outputs:
      latestVersion: ${{ steps.latest-version.outputs.result }}
      lastVersion: ${{ env.lastVersion }}

    steps:
      - name: 'Git Checkout'
        uses: 'actions/checkout@v2'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v1'
        with:
          node-version: '18.x'

      - name: 'Install node-fetch'
        run: 'npm install node-fetch@2'

      - name: 'Get Latest Version'
        id: 'latest-version'
        uses: 'actions/github-script@v6'
        with:
          script: |
            const fetch = require('node-fetch')
            const res = await fetch('https://api.github.com/repos/twitter/twemoji/releases/latest')
  
            return (await res.json()).tag_name

      - name: 'Get Last Version'
        run: echo "lastVersion=$(cat version.txt)" >> $GITHUB_ENV

  update:
    needs: 'check-version'
    if: ${{ needs.check-version.outputs.latestVersion != needs.check-version.outputs.lastVersion }}
    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'actions/checkout@v2'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v1'
        with:
          node-version: '18.x'

      - name: 'Install Dependencies'
        run: 'npm ci'

      - name: 'Create Update'
        env:
          - latestVersion: ${{ needs.check-version.outputs.latestVersion }}
        run: 'npm run update'
      
      - name: 'Publish Packages'
        run: 'npm publish && npm run publish:all'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 'Push Changes'
        run: |
          git commit -am "ci: bump twemazing to latest twemoji version"
          git push

      - name: 'Get Package Version'
        run: echo "packageVersion=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: 'Create and Publish Release'
        uses: 'actions/github-script@v6'
        env:
          - latestVersion: 'v${{ needs.check-version.outputs.latestVersion }}'
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.packageVersion}`,
              name: `v${process.env.packageVersion}`,
              body: '> **Note**: This is an automated update.',
              draft: false,
              prerelease: false
            })
            


